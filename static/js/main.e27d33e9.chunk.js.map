{"version":3,"sources":["actionTypes.js","reducer.js","store.js","apiHelper.js","view.js","constants.js","customDropdown.js","viewController.js","App.js","index.js"],"names":["SET_URL_LIST","APPEND_URL_LIST","SET_BREED_DATA","SET_ROW_MAP","SET_CURRENT_BREED","initialState","urlList","OrderedSet","breedData","rowMap","Map","activeBreedData","breed","subBreed","hasMoreImages","createStore","state","action","type","newUrlList","union","size","getRandomImagesAPI","number","getRandomImages","fetch","then","response","json","result","store","dispatch","message","catch","error","console","log","getDesiredWidth","window","innerWidth","getMaxNumberOfImagesInRow","Math","min","floor","setRowMap","View","props","reformat","e","incremental","rowIndex_","undefined","index_","numberOfImagesInRow_","preventDefault","oldRowMap","indicesList","getIn","Set","add","delete","forEach","i","addWidthToMap","document","getElementById","toString","length","maxNumberOfImagesInRow","rowIndex","numberOfImagesInRow","loadMoreImages","getMoreRandomImages","currentBreed","currentSubBreed","imageElement","index","rowMapRef","has","set","width","indicesLoaded","updateIn","w","clientWidth","setIn","newHeight","clientHeight","showImageModal","selectedImageId","this","addEventListener","removeEventListener","imageList","height","hasIn","push","id","src","onClick","setState","style","padding","onLoad","className","dataLength","next","hasMore","loader","endMessage","textAlign","Modal","show","onHide","Header","closeButton","Body","Footer","Component","connect","toJS","reformatting","String","prototype","CapitalizeEachWord","toLowerCase","split","map","s","charAt","toUpperCase","substring","join","setCurrentBreed","useState","value","setValue","mapIndexToBreedData","onSelect","eventKey","get","iMap","itemList","NavDropdown","Item","filter","child","children","includes","title","FormControl","autoFocus","placeholder","onChange","target","ViewController","Navbar","bg","expand","collapseOnSelect","Nav","Brand","href","Text","Toggle","aria-controls","Collapse","Link","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e27d33e9.chunk.js","sourcesContent":["export const SET_URL_LIST = \"SET_URL_LIST\";\nexport const APPEND_URL_LIST = \"APPEND_URL_LIST\";\nexport const SET_BREED_DATA = \"SET_BREED_DATA\";\nexport const SET_ROW_MAP = \"SET_ROW_MAP\";\nexport const SET_CURRENT_BREED = \"SET_CURRENT_BREED\";\n","import {\n  SET_URL_LIST,\n  SET_BREED_DATA,\n  SET_ROW_MAP,\n  APPEND_URL_LIST,\n  SET_CURRENT_BREED,\n} from \"./actionTypes\";\n\nimport { OrderedSet, Map } from \"immutable\";\n\nlet initialState = {\n  urlList: OrderedSet([]), // Ordered Set of image urls (Avoids Duplicate URLs)\n  breedData: {}, // object containing all breeds and subbreed\n  rowMap: Map(), // Immutable Map ( key: rowIndex, value: Object), data structure used in formatting algorithm for justified image grid\n  activeBreedData: { breed: \"pug\", subBreed: null }, // selected breed information\n  hasMoreImages: true, // if more unique images are present\n};\n\nexport default function Reducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_URL_LIST: {\n      return { ...state, urlList: OrderedSet(action.urlList) };\n    }\n    case APPEND_URL_LIST: {\n      let newUrlList = state.urlList.union(action.urlList);\n      let hasMoreImages = newUrlList.size > state.urlList.size;\n      return { ...state, urlList: newUrlList, hasMoreImages: hasMoreImages };\n    }\n    case SET_BREED_DATA: {\n      return { ...state, breedData: action.breedData };\n    }\n    case SET_ROW_MAP: {\n      return { ...state, rowMap: action.rowMap };\n    }\n    case SET_CURRENT_BREED: {\n      return {\n        ...state,\n        activeBreedData: { breed: action.breed, subBreed: action.subBreed },\n      };\n    }\n  }\n\n  return initialState;\n}\n","import rootReducer from \"./reducer\";\nimport { createStore } from \"redux\";\n\nexport default createStore(rootReducer);\n\n/*  To use redux dev tools, remove the following comments\n// import { createStore, applyMiddleware, compose } from \"redux\";\n// import thunk from \"redux-thunk\";\n\n// const store = createStore(\n//     rootReducer,\n//     compose(\n//         applyMiddleware(thunk),\n//         window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n//     )\n// );\n\n// export default store;\n\n*/\n","import { APPEND_URL_LIST, SET_URL_LIST, SET_BREED_DATA } from \"./actionTypes\";\nimport store from \"./store\";\n\nconst getAllImagesAPI = (breed, subBreed = null) => {\n  return `https://dog.ceo/api/breed/${breed}/${\n    subBreed === null ? \"\" : `${subBreed}/`\n  }images/`;\n};\n\nconst getRandomImagesAPI = (number, breed, subBreed = null) => {\n  if (breed !== null)\n    return `https://dog.ceo/api/breed/${breed}/${\n      subBreed === null ? \"\" : `${subBreed}/`\n    }images/random/${number}`;\n  else return `https://dog.ceo/api/breeds/image/random/${number}`;\n};\n\nconst getListOfBreedsAPI = () => {\n  return `https://dog.ceo/api/breeds/list/all`;\n};\n\nexport const getMoreRandomImages = (number, breed, subBreed = null) => {\n  fetch(getRandomImagesAPI(number, breed, subBreed))\n    .then((response) => response.json())\n    .then((result) =>\n      store.dispatch({ type: APPEND_URL_LIST, urlList: result.message })\n    )\n    .catch((error) => {\n      console.log(\"Error:\", error);\n    });\n};\n\nexport const getRandomImages = (number, breed, subBreed = null) => {\n  fetch(getRandomImagesAPI(number, breed, subBreed))\n    .then((response) => response.json())\n    .then((result) =>\n      store.dispatch({ type: SET_URL_LIST, urlList: result.message })\n    )\n    .catch((error) => {\n      console.log(\"Error:\", error);\n    });\n};\n\nexport const getListOfBreeds = () => {\n  fetch(getListOfBreedsAPI())\n    .then((response) => response.json())\n    .then((result) =>\n      store.dispatch({ type: SET_BREED_DATA, breedData: result.message })\n    )\n    .catch((error) => {\n      console.log(\"Error:\", error);\n    });\n};\n","import { Modal } from \"react-bootstrap\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Map, Set } from \"immutable\";\nimport store from \"./store\";\nimport { SET_ROW_MAP } from \"./actionTypes\";\nimport \"./view.css\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { getMoreRandomImages, getRandomImages } from \"./apiHelper\";\nimport { RANDOM_SAMPLE_SIZE } from \"./constants\";\n\nconst mapStateToProps = (state) => {\n  return {\n    urlList: state.urlList.toJS(),\n    rowMap: state.rowMap,\n    currentBreed: state.activeBreedData.breed,\n    currentSubBreed: state.activeBreedData.subBreed,\n    hasMoreImages: state.hasMoreImages,\n    reformatting: state.reformatting,\n  };\n};\n\nconst getDesiredWidth = () => {\n  return window.innerWidth * 0.985;\n};\n\nconst getMaxNumberOfImagesInRow = () => {\n  return Math.min(Math.floor(getDesiredWidth() / 200), 5);\n};\n\nexport const setRowMap = (rowMap) => {\n  store.dispatch({ type: SET_ROW_MAP, rowMap: rowMap });\n};\n\nclass View extends Component {\n  /* Gallery Viewer Component\n     Arranges Images into a justified grid\n  */\n  constructor(props) {\n    super(props);\n    this.state = {\n      showImageModal: false,\n      selectedImageId: null,\n    };\n  }\n\n  reformat = (\n    e,\n    incremental = false,\n    rowIndex_ = undefined,\n    index_ = undefined,\n    numberOfImagesInRow_ = undefined\n  ) => {\n    /* Code for Justifying the grid\n       Cumulative width of each image row should be same\n       defined by getDesiredWidth()\n    */\n    e.preventDefault();\n    let oldRowMap = this.props.rowMap;\n    let rowMap;\n    if (incremental) {\n      rowMap = oldRowMap;\n      let indicesList = oldRowMap\n        .getIn([rowIndex_, \"indicesLoaded\"], Set([]))\n        .add(index_);\n      rowMap = rowMap.delete(rowIndex_);\n      indicesList.forEach((i) => {\n        rowMap = this.addWidthToMap(\n          document.getElementById(`image${i}`),\n          rowIndex_.toString(),\n          i,\n          numberOfImagesInRow_,\n          rowMap\n        );\n      });\n    } else {\n      rowMap = Map();\n      for (let i = 0; i < this.props.urlList.length; i++) {\n        let maxNumberOfImagesInRow = getMaxNumberOfImagesInRow();\n        let rowIndex = Math.floor(i / maxNumberOfImagesInRow);\n\n        let numberOfImagesInRow = maxNumberOfImagesInRow;\n        if (\n          rowIndex ===\n          Math.floor((this.props.urlList.length - 1) / maxNumberOfImagesInRow)\n        ) {\n          numberOfImagesInRow =\n            this.props.urlList.length - maxNumberOfImagesInRow * rowIndex;\n        }\n\n        rowMap = this.addWidthToMap(\n          document.getElementById(`image${i}`),\n          rowIndex.toString(),\n          i,\n          numberOfImagesInRow,\n          rowMap\n        );\n      }\n    }\n\n    setRowMap(rowMap);\n  };\n\n  loadMoreImages = () => {\n    getMoreRandomImages(\n      RANDOM_SAMPLE_SIZE,\n      this.props.currentBreed,\n      this.props.currentSubBreed\n    );\n  };\n\n  componentDidMount() {\n    getRandomImages(\n      RANDOM_SAMPLE_SIZE,\n      this.props.currentBreed,\n      this.props.currentSubBreed\n    );\n    window.addEventListener(\"resize\", this.reformat);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.reformat);\n  }\n\n  addWidthToMap = (\n    imageElement,\n    rowIndex,\n    index,\n    numberOfImagesInRow,\n    rowMapRef = undefined\n  ) => {\n    let rowMap = rowMapRef ? rowMapRef : this.props.rowMap;\n    if (!rowMap.has(rowIndex)) {\n      rowMap = rowMap.set(rowIndex, { width: 0 });\n    }\n    let indicesLoaded = rowMap.getIn([rowIndex, \"indicesLoaded\"], Set([]));\n\n    if (!indicesLoaded.has(index)) {\n      rowMap = rowMap.updateIn(\n        [rowIndex, \"width\"],\n        (w) => w + imageElement.clientWidth\n      );\n      rowMap = rowMap.setIn(\n        [rowIndex, \"indicesLoaded\"],\n        indicesLoaded.add(index)\n      );\n\n      if (\n        rowMap.getIn([rowIndex, \"indicesLoaded\"]).size === numberOfImagesInRow\n      ) {\n        let newHeight =\n          (imageElement.clientHeight / window.innerWidth) *\n          100 *\n          (getDesiredWidth() / rowMap.getIn([rowIndex, \"width\"]));\n        rowMap = rowMap.setIn([rowIndex, \"height\"], newHeight);\n      }\n      if (rowMapRef === undefined) setRowMap(rowMap);\n      else return rowMap;\n    }\n  };\n\n  render() {\n    const handleClose = () => this.setState({ showImageModal: false });\n    const handleShow = () => this.setState({ showImageModal: true });\n    let imageList = [];\n\n    for (let i = 0; i < this.props.urlList.length; i++) {\n      let rowIndex = Math.floor(i / getMaxNumberOfImagesInRow());\n      let height = 30;\n\n      let maxNumberOfImagesInRow = getMaxNumberOfImagesInRow();\n      let numberOfImagesInRow = maxNumberOfImagesInRow;\n      if (\n        rowIndex ===\n        Math.floor((this.props.urlList.length - 1) / maxNumberOfImagesInRow)\n      ) {\n        numberOfImagesInRow =\n          this.props.urlList.length - maxNumberOfImagesInRow * rowIndex;\n      }\n\n      if (this.props.rowMap.hasIn([rowIndex.toString(), \"height\"])) {\n        height = this.props.rowMap.getIn([rowIndex.toString(), \"height\"]);\n      }\n      imageList.push(\n        <img\n          key={`image${i}`}\n          id={`image${i}`}\n          src={this.props.urlList[i]}\n          onClick={() => {\n            this.setState({ selectedImageId: i });\n            handleShow();\n          }}\n          style={{ height: `${height}vw`, padding: \"0.2%\" }}\n          onLoad={(e) =>\n            this.reformat(e, true, rowIndex.toString(), i, numberOfImagesInRow)\n          }\n        />\n      );\n    }\n\n    return (\n      <div>\n        <div className='flex-container'>\n          <InfiniteScroll\n            dataLength={this.props.urlList.length} //This is important field to render the next data\n            next={this.loadMoreImages}\n            hasMore={this.props.hasMoreImages}\n            loader={<h4>Loading...</h4>}\n            endMessage={\n              <p style={{ textAlign: \"center\" }}>\n                <b>You have seen them all!</b>\n              </p>\n            }\n          >\n            {imageList}\n          </InfiniteScroll>\n        </div>\n        <Modal show={this.state.showImageModal} onHide={handleClose}>\n          <Modal.Header closeButton></Modal.Header>\n          <Modal.Body>\n            <img\n              src={this.props.urlList[this.state.selectedImageId]}\n              style={{ width: \"100%\" }}\n            />\n          </Modal.Body>\n          <Modal.Footer></Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps, null)(View);\n","export const RANDOM_SAMPLE_SIZE = 30;\n","import React, { useState } from \"react\";\nimport { NavDropdown, FormControl } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { SET_CURRENT_BREED } from \"./actionTypes\";\nimport { setRowMap } from \"./view\";\nimport { Map as iMap } from \"immutable\";\nimport { getRandomImages, getRandomImagesAPI } from \"./apiHelper\";\nimport { RANDOM_SAMPLE_SIZE } from \"./constants\";\nimport \"./customDropdown.css\";\n\nString.prototype.CapitalizeEachWord = function () {\n  let text = this.toLowerCase()\n    .split(\" \")\n    .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n    .join(\" \");\n  return text;\n};\n\nconst mapStateToProps = (state) => {\n  return { breedData: state.breedData };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setCurrentBreed: (breed, subBreed) =>\n      dispatch({ type: SET_CURRENT_BREED, breed: breed, subBreed: subBreed }),\n  };\n};\n\nconst CustomDropdown = (props) => {\n  // Custom DropDown Selection Menu that facilitates filtering based on query\n\n  const [value, setValue] = useState(\"\");\n  let mapIndexToBreedData = new Map();\n  const onSelect = (eventKey) => {\n    setValue(\"\");\n    let breedData = mapIndexToBreedData.get(eventKey);\n    setRowMap(iMap());\n    props.setCurrentBreed(breedData.breed, breedData.subBreed);\n    getRandomImages(RANDOM_SAMPLE_SIZE, breedData.breed, breedData.subBreed);\n  };\n\n  let itemList = [];\n  for (const breed in props.breedData) {\n    if (props.breedData[breed].length === 0) {\n      let eventKey = `${breed}`.CapitalizeEachWord();\n      mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: null });\n      itemList.push(\n        <NavDropdown.Item\n          key={eventKey}\n          eventKey={eventKey}\n          onSelect={onSelect}\n          onClick={() => {\n            setValue(eventKey);\n          }}\n        >\n          {eventKey}\n        </NavDropdown.Item>\n      );\n    } else {\n      props.breedData[breed].forEach((subBreed) => {\n        let eventKey = `${breed}`.CapitalizeEachWord();\n        if (!mapIndexToBreedData.has(eventKey)) {\n          mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: null });\n          itemList.push(\n            <NavDropdown.Item\n              key={eventKey}\n              eventKey={eventKey}\n              onSelect={onSelect}\n              onClick={() => {\n                setValue(eventKey);\n              }}\n            >\n              {eventKey}\n            </NavDropdown.Item>\n          );\n        }\n\n        eventKey = `${subBreed} ${breed}`.CapitalizeEachWord();\n        mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: subBreed });\n        itemList.push(\n          <NavDropdown.Item\n            key={eventKey}\n            eventKey={eventKey}\n            onSelect={onSelect}\n            onClick={() => {\n              setValue(eventKey);\n            }}\n          >\n            {eventKey}\n          </NavDropdown.Item>\n        );\n      });\n    }\n  }\n\n  itemList = itemList.filter(\n    (child) =>\n      !value || child.props.children.toLowerCase().includes(value.toLowerCase())\n  );\n  if (itemList.length === 0) {\n    itemList.push(<NavDropdown.Item>No Results </NavDropdown.Item>);\n  }\n\n  return (\n    <NavDropdown title={\"Select Breed\"} value={value}>\n      <FormControl\n        autoFocus\n        className='mx-2 my-2 w-auto'\n        placeholder='Filter by Breed'\n        onChange={(e) => setValue(e.target.value)}\n        value={value}\n      ></FormControl>\n      {itemList}\n    </NavDropdown>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomDropdown);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { SET_CURRENT_BREED } from \"./actionTypes\";\nimport { RANDOM_SAMPLE_SIZE } from \"./constants\";\nimport CustomDropdown from \"./customDropdown\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { getListOfBreeds, getRandomImages } from \"./apiHelper\";\n\nconst mapStateToProps = (state) => {\n  return {\n    breed: state.activeBreedData.breed,\n    subBreed: state.activeBreedData.subBreed,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setCurrentBreed: () => {\n      getRandomImages(RANDOM_SAMPLE_SIZE, null, null);\n      dispatch({ type: SET_CURRENT_BREED, breed: null, subBreed: null });\n    },\n  };\n};\n\nclass ViewController extends Component {\n  // renders top navigation bar\n  componentDidMount() {\n    getListOfBreeds();\n  }\n\n  render() {\n    let title = `${this.props.subBreed ? this.props.subBreed + \" \" : \"\"}${\n      this.props.breed ? this.props.breed : \"All Breeds\"\n    }`.CapitalizeEachWord();\n    return (\n      <div>\n        <Navbar bg='light' expand='lg' collapseOnSelect={true}>\n          <Nav className='mr-auto'>\n            <Navbar.Brand href='#home'>Dog Finder</Navbar.Brand>\n          </Nav>\n          <Nav className='mr-auto'>\n            <Navbar.Text size='lg'> {title} </Navbar.Text>\n          </Nav>\n          <Nav>\n            <Navbar.Toggle aria-controls='responsive-navbar-nav' />\n            <Navbar.Collapse id='basic-navbar-nav'>\n              <CustomDropdown />\n              <Nav.Link onClick={this.props.setCurrentBreed}> Random </Nav.Link>\n              <Nav.Link\n                id='githubLink'\n                href={\"https://github.com/prernakothari/dog-finder\"}\n                target={\"_blank\"}\n              >\n                {\" \"}\n                &nbsp;{\" \"}\n              </Nav.Link>\n            </Navbar.Collapse>\n          </Nav>\n        </Navbar>\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewController);\n","import \"./App.css\";\nimport View from \"./view\";\nimport ViewController from \"./viewController\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <ViewController />\n      <View />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}