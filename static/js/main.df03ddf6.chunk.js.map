{"version":3,"sources":["actionTypes.js","reducer.js","store.js","apiHelper.js","viewer.js","constants.js","customDropdown.js","viewControl.js","App.js","reportWebVitals.js","index.js"],"names":["SET_URL_LIST","APPEND_URL_LIST","SET_BREED_DATA","SET_ROW_MAP","SET_CURRENT_BREED","initialState","urlList","OrderedSet","breedData","rowMap","Map","activeBreedData","breed","subBreed","hasMoreImages","createStore","state","action","type","newUrlList","union","size","getRandomImagesAPI","number","getRandomImages","fetch","then","response","json","result","store","dispatch","message","catch","error","console","log","getDesiredWidth","window","innerWidth","getMaxNumberOfImagesInRow","Math","min","floor","setRowMap","Viewer","props","reformat","e","incremental","rowIndex_","undefined","index_","numberOfImagesInRow_","preventDefault","oldRowMap","indicesList","getIn","Set","add","delete","forEach","i","addWidthToMap","document","getElementById","toString","length","maxNumberOfImagesInRow","rowIndex","numberOfImagesInRow","loadMoreImages","getMoreRandomImages","currentBreed","currentSubBreed","imageElement","index","rowMapRef","has","set","width","indicesLoaded","updateIn","w","clientWidth","setIn","newHeight","clientHeight","showImageModal","selectedImageId","this","addEventListener","removeEventListener","imageList","height","hasIn","push","id","src","onClick","setState","style","padding","onLoad","className","dataLength","next","hasMore","loader","endMessage","textAlign","Modal","show","onHide","Header","closeButton","Body","Footer","Component","connect","toJS","reformatting","String","prototype","CapitalizeEachWord","toLowerCase","split","map","s","charAt","toUpperCase","substring","join","setCurrentBreed","useState","value","setValue","mapIndexToBreedData","onSelect","eventKey","get","iMap","itemList","NavDropdown","Item","filter","child","children","includes","title","FormControl","autoFocus","placeholder","onChange","target","ViewControl","Navbar","bg","expand","collapseOnSelect","Nav","Brand","href","Text","Toggle","aria-controls","Collapse","Link","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.df03ddf6.chunk.js","sourcesContent":["export const SET_URL_LIST = \"SET_URL_LIST\";\nexport const APPEND_URL_LIST = \"APPEND_URL_LIST\";\nexport const SET_BREED_DATA = \"SET_BREED_DATA\";\nexport const SET_ROW_MAP = \"SET_ROW_MAP\";\nexport const SET_CURRENT_BREED = \"SET_CURRENT_BREED\";","import { SET_URL_LIST, SET_BREED_DATA, SET_ROW_MAP, APPEND_URL_LIST, SET_CURRENT_BREED } from \"./actionTypes\"\n\nimport { OrderedSet, Map } from \"immutable\"\n\nlet initialState = { urlList: OrderedSet([]), breedData: {}, rowMap: Map(), activeBreedData: { breed: \"pug\", subBreed: null }, hasMoreImages: true }\n\nexport default function Reducer(state = initialState, action) {\n    switch (action.type) {\n        case SET_URL_LIST: {\n            return { ...state, urlList: OrderedSet(action.urlList) }\n        }\n        case APPEND_URL_LIST: {\n            let newUrlList = state.urlList.union(action.urlList)\n            let hasMoreImages = newUrlList.size > state.urlList.size\n            return { ...state, urlList: newUrlList, hasMoreImages: hasMoreImages }\n        }\n        case SET_BREED_DATA: {\n            return { ...state, breedData: action.breedData }\n        }\n        case SET_ROW_MAP: {\n            return { ...state, rowMap: action.rowMap }\n        }\n        case SET_CURRENT_BREED: {\n            return { ...state, activeBreedData: { breed: action.breed, subBreed: action.subBreed } }\n        }\n    }\n\n    return initialState;\n}","import rootReducer from \"./reducer\"\nimport { createStore } from \"redux\";\n\nexport default createStore(rootReducer);\n\n\n// import { createStore, applyMiddleware, compose } from \"redux\";\n// import thunk from \"redux-thunk\";\n\n// const store = createStore(\n//     rootReducer,\n//     compose(\n//         applyMiddleware(thunk),\n//         window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n//     )\n// );\n\n\n// export default store;","import { APPEND_URL_LIST, SET_URL_LIST, SET_BREED_DATA } from \"./actionTypes\"\nimport store from \"./store\"\n\nconst getAllImagesAPI = (breed, subBreed = null) => {\n    return `https://dog.ceo/api/breed/${breed}/${subBreed === null ? \"\" : `${subBreed}/`}images/`\n}\n\nconst getRandomImagesAPI = (number, breed, subBreed = null) => {\n    if (breed !== null)\n        return `https://dog.ceo/api/breed/${breed}/${subBreed === null ? \"\" : `${subBreed}/`}images/random/${number}`\n    else\n        return `https://dog.ceo/api/breeds/image/random/${number}`\n}\n\nconst getListOfBreedsAPI = () => {\n    return `https://dog.ceo/api/breeds/list/all`\n}\n\nexport const getMoreRandomImages = (number, breed, subBreed = null) => {\n    fetch(getRandomImagesAPI(number, breed, subBreed))\n        .then((response) => response.json())\n        .then((result) =>\n            store.dispatch({ type: APPEND_URL_LIST, urlList: result.message })\n        )\n        .catch(error => {\n            console.log(\"Error:\", error)\n        });\n}\n\nexport const getRandomImages = (number, breed, subBreed = null) => {\n    fetch(getRandomImagesAPI(number, breed, subBreed))\n        .then((response) => response.json())\n        .then((result) =>\n            store.dispatch({ type: SET_URL_LIST, urlList: result.message })\n        )\n        .catch(error => {\n            console.log(\"Error:\", error)\n        });\n}\n\nexport const getListOfBreeds = () => {\n    fetch(getListOfBreedsAPI())\n        .then((response) => response.json())\n        .then((result) =>\n            store.dispatch({ type: SET_BREED_DATA, breedData: result.message })\n        )\n        .catch(error => {\n            console.log(\"Error:\", error)\n        });\n}","import { render } from \"@testing-library/react\";\nimport { Modal } from \"react-bootstrap\"\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Map, Set } from \"immutable\";\nimport store from \"./store\";\nimport { SET_ROW_MAP } from \"./actionTypes\";\nimport \"./viewer.css\"\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { getMoreRandomImages, getRandomImages } from \"./apiHelper\";\nimport { RANDOM_SAMPLE_SIZE } from \"./constants\";\n\nconst mapStateToProps = (state) => {\n  return {\n    urlList: state.urlList.toJS(), rowMap: state.rowMap, currentBreed: state.activeBreedData.breed, currentSubBreed: state.activeBreedData.subBreed,\n    hasMoreImages: state.hasMoreImages, reformatting: state.reformatting\n  };\n};\n\nconst getDesiredWidth = () => {\n  return window.innerWidth * 0.985\n}\n\nconst getMaxNumberOfImagesInRow = () => {\n  return Math.min(Math.floor(getDesiredWidth() / 200), 5)\n}\n\nexport const setRowMap = (rowMap) => {\n  store.dispatch({ type: SET_ROW_MAP, rowMap: rowMap })\n}\n\nclass Viewer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showImageModal: false,\n      selectedImageId: null,\n    }\n  }\n\n  reformat = (e, incremental = false, rowIndex_ = undefined, index_ = undefined, numberOfImagesInRow_ = undefined) => {\n    e.preventDefault()\n    let oldRowMap = this.props.rowMap\n    let rowMap;\n    if (incremental) {\n      rowMap = oldRowMap\n      let indicesList = oldRowMap.getIn([rowIndex_, \"indicesLoaded\"], Set([])).add(index_)\n      rowMap = rowMap.delete(rowIndex_)\n      indicesList.forEach(i => {\n        rowMap = this.addWidthToMap(document.getElementById(`image${i}`), rowIndex_.toString(), i, numberOfImagesInRow_, rowMap)\n      })\n    } else {\n      rowMap = Map()\n      for (let i = 0; i < this.props.urlList.length; i++) {\n        let maxNumberOfImagesInRow = getMaxNumberOfImagesInRow()\n        let rowIndex = Math.floor(i / maxNumberOfImagesInRow);\n\n        let numberOfImagesInRow = maxNumberOfImagesInRow;\n        if (rowIndex === Math.floor((this.props.urlList.length - 1) / maxNumberOfImagesInRow)) {\n          numberOfImagesInRow = this.props.urlList.length - maxNumberOfImagesInRow * rowIndex\n        }\n\n        rowMap = this.addWidthToMap(document.getElementById(`image${i}`), rowIndex.toString(), i, numberOfImagesInRow, rowMap)\n      }\n    }\n\n    setRowMap(rowMap);\n  }\n\n  loadMoreImages = () => {\n    getMoreRandomImages(RANDOM_SAMPLE_SIZE, this.props.currentBreed, this.props.currentSubBreed)\n  }\n\n  componentDidMount() {\n    getRandomImages(RANDOM_SAMPLE_SIZE, this.props.currentBreed, this.props.currentSubBreed)\n    window.addEventListener(\"resize\", this.reformat)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.reformat)\n  }\n\n\n  addWidthToMap = (imageElement, rowIndex, index, numberOfImagesInRow, rowMapRef = undefined) => {\n    let rowMap = rowMapRef ? rowMapRef : this.props.rowMap\n    if (!rowMap.has(rowIndex)) {\n      rowMap = rowMap.set(rowIndex, { width: 0 })\n    }\n    let indicesLoaded = rowMap.getIn([rowIndex, \"indicesLoaded\"], Set([]))\n\n    if (!indicesLoaded.has(index)) {\n      rowMap = rowMap.updateIn([rowIndex, \"width\"], w => w + imageElement.clientWidth)\n      rowMap = rowMap.setIn([rowIndex, \"indicesLoaded\"], indicesLoaded.add(index))\n\n      if (rowMap.getIn([rowIndex, \"indicesLoaded\"]).size === numberOfImagesInRow) {\n        let newHeight = imageElement.clientHeight / window.innerWidth * 100 * (getDesiredWidth() / rowMap.getIn([rowIndex, \"width\"]))\n        rowMap = rowMap.setIn([rowIndex, \"height\"], newHeight)\n      }\n      if (rowMapRef === undefined)\n        setRowMap(rowMap);\n      else\n        return rowMap\n    }\n  }\n\n  render() {\n    const handleClose = () => this.setState({ showImageModal: false });\n    const handleShow = () => this.setState({ showImageModal: true });\n    let imageList = []\n\n    for (let i = 0; i < this.props.urlList.length; i++) {\n      let rowIndex = Math.floor(i / getMaxNumberOfImagesInRow());\n      let height = 30;\n\n      let maxNumberOfImagesInRow = getMaxNumberOfImagesInRow()\n      let numberOfImagesInRow = maxNumberOfImagesInRow\n      if (rowIndex === Math.floor((this.props.urlList.length - 1) / maxNumberOfImagesInRow)) {\n        numberOfImagesInRow = this.props.urlList.length - maxNumberOfImagesInRow * rowIndex\n      }\n\n      if (this.props.rowMap.hasIn([rowIndex.toString(), \"height\"])) {\n        height = this.props.rowMap.getIn([rowIndex.toString(), \"height\"])\n      }\n      imageList.push(<img key={`image${i}`} id={`image${i}`} src={this.props.urlList[i]}\n        onClick={() => {\n          this.setState({ selectedImageId: i });\n          handleShow();\n        }}\n        style={{ height: `${height}vw`, padding: \"0.2%\" }}\n        onLoad={(e) => this.reformat(e, true, rowIndex.toString(), i, numberOfImagesInRow)}\n      />)\n    }\n\n    return (\n      <div>\n        <div className=\"flex-container\">\n          <InfiniteScroll\n            dataLength={this.props.urlList.length} //This is important field to render the next data\n            next={this.loadMoreImages}\n            hasMore={this.props.hasMoreImages}\n            loader={<h4>Loading...</h4>}\n            endMessage={\n              <p style={{ textAlign: 'center' }}>\n                <b>Yay! You have seen it all</b>\n              </p>\n            }\n          >\n            {imageList}\n          </InfiniteScroll>\n        </div>\n        <Modal show={this.state.showImageModal} onHide={handleClose}>\n          <Modal.Header closeButton>\n          </Modal.Header>\n          <Modal.Body><img src={this.props.urlList[this.state.selectedImageId]} style={{ width: \"100%\" }} /></Modal.Body>\n          <Modal.Footer>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps, null)(Viewer);\n","export const RANDOM_SAMPLE_SIZE = 30\n","// The forwardRef is important!!\nimport React, { useState } from \"react\";\nimport { NavDropdown, FormControl } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { SET_CURRENT_BREED } from \"./actionTypes\";\nimport { setRowMap } from \"./viewer\";\nimport { Map as iMap } from \"immutable\"\nimport { getRandomImages, getRandomImagesAPI } from \"./apiHelper\";\nimport { RANDOM_SAMPLE_SIZE } from \"./constants\";\nimport \"./customDropdown.css\"\n\nString.prototype.CapitalizeEachWord = function () {\n  let text = this.toLowerCase()\n    .split(\" \")\n    .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n    .join(\" \");\n  return text;\n};\n\nconst mapStateToProps = (state) => {\n  return { breedData: state.breedData };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setCurrentBreed: (breed, subBreed) => dispatch({ type: SET_CURRENT_BREED, breed: breed, subBreed: subBreed })\n  }\n};\n\nconst CustomDropdown = (props) => {\n  const [value, setValue] = useState(\"\")\n  let mapIndexToBreedData = new Map();\n  const onSelect = (eventKey) => {\n    let breedData = mapIndexToBreedData.get(eventKey);\n    setRowMap(iMap())\n    props.setCurrentBreed(breedData.breed, breedData.subBreed)\n    getRandomImages(RANDOM_SAMPLE_SIZE, breedData.breed, breedData.subBreed)\n  };\n\n  let itemList = [];\n  for (const breed in props.breedData) {\n    if (props.breedData[breed].length === 0) {\n      let eventKey = `${breed}`.CapitalizeEachWord()\n      mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: null });\n      itemList.push(\n        <NavDropdown.Item key={eventKey} eventKey={eventKey} onSelect={onSelect} onClick={() => { setValue(eventKey) }}>\n          {eventKey}\n        </NavDropdown.Item>\n      );\n    } else {\n      props.breedData[breed].forEach((subBreed) => {\n        let eventKey = `${breed}`.CapitalizeEachWord()\n        if (!mapIndexToBreedData.has(eventKey)) {\n          mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: null });\n          itemList.push(\n            <NavDropdown.Item key={eventKey} eventKey={eventKey} onSelect={onSelect} onClick={() => { setValue(eventKey) }}>\n              {eventKey}\n            </NavDropdown.Item>\n          );\n        }\n\n        eventKey = `${subBreed} ${breed}`.CapitalizeEachWord()\n        mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: subBreed });\n        itemList.push(\n          <NavDropdown.Item key={eventKey} eventKey={eventKey} onSelect={onSelect} onClick={() => { setValue(eventKey) }}>\n            {eventKey}\n          </NavDropdown.Item>\n        );\n\n      });\n    }\n  }\n\n  itemList = itemList.filter(\n    (child) =>\n      !value || child.props.children.toLowerCase().includes(value.toLowerCase())\n  )\n  if (itemList.length === 0) {\n    itemList.push(<NavDropdown.Item>No Results </NavDropdown.Item>)\n  }\n\n  return (\n    <NavDropdown title={\"Select Breed\"} value={value}>\n      <FormControl\n        autoFocus\n        className='mx-2 my-2 w-auto'\n        placeholder='Filter by Breed'\n        onChange={(e) => setValue(e.target.value)}\n        value={value}\n      ></FormControl>\n      {itemList}\n\n    </NavDropdown>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomDropdown);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { SET_CURRENT_BREED } from \"./actionTypes\";\nimport { RANDOM_SAMPLE_SIZE } from \"./constants\";\nimport CustomDropdown from \"./customDropdown\";\nimport {\n  Navbar,\n  Nav,\n} from \"react-bootstrap\";\nimport { getListOfBreeds, getRandomImages } from \"./apiHelper\";\nconst mapStateToProps = (state) => {\n  return { breed: state.activeBreedData.breed, subBreed: state.activeBreedData.subBreed };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setCurrentBreed: () => {\n      getRandomImages(RANDOM_SAMPLE_SIZE, null, null)\n      dispatch({ type: SET_CURRENT_BREED, breed: null, subBreed: null })\n    }\n  }\n};\n\nclass ViewControl extends Component {\n  componentDidMount() {\n    getListOfBreeds()\n  }\n  render() {\n    let title = `${this.props.subBreed ? this.props.subBreed + \" \" : \"\"}${this.props.breed ? this.props.breed : \"All Breeds\"}`.CapitalizeEachWord()\n    return (\n      <div>\n        <Navbar bg=\"light\" expand=\"lg\" collapseOnSelect = {true} >\n          <Nav className=\"mr-auto\">\n            <Navbar.Brand href=\"#home\">Dog Finder</Navbar.Brand>\n          </Nav>\n          <Nav className=\"mr-auto\">\n            <Navbar.Text size=\"lg\"> {title} </Navbar.Text>\n          </Nav>\n          <Nav> \n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <CustomDropdown />\n              <Nav.Link onClick={this.props.setCurrentBreed}> Random </Nav.Link>\n              <Nav.Link id=\"githubLink\" href={\"http://motiongenpro.appspot.com/\"} target={\"_blank\"} > &nbsp; </Nav.Link>\n            </Navbar.Collapse>\n          </Nav>\n        </Navbar>\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewControl);\n","import './App.css';\nimport Viewer from \"./viewer\"\nimport ViewControl from \"./viewControl\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ViewControl />\n      <Viewer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from \"./store\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}