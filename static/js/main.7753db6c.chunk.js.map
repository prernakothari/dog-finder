{"version":3,"sources":["actionTypes.js","reducer.js","store.js","apiHelper.js","viewer.js","constants.js","customDropdown.js","viewControl.js","App.js","reportWebVitals.js","index.js"],"names":["SET_URL_LIST","APPEND_URL_LIST","SET_BREED_DATA","SET_ROW_MAP","SET_CURRENT_BREED","initialState","urlList","OrderedSet","breedData","rowMap","Map","activeBreedData","breed","subBreed","hasMoreImages","createStore","state","action","type","newUrlList","union","size","getRandomImagesAPI","number","getMoreRandomImages","fetch","then","response","json","result","store","dispatch","message","getRandomImages","getDesiredWidth","window","innerWidth","getMaxNumberOfImagesInRow","Math","min","floor","setRowMap","Viewer","reset","setState","reformat","e","incremental","rowIndex_","undefined","index_","numberOfImagesInRow_","preventDefault","oldRowMap","props","indicesList","getIn","Set","add","delete","forEach","i","addWidthToMap","document","getElementById","toString","length","maxNumberOfImagesInRow","rowIndex","numberOfImagesInRow","loadMoreImages","currentBreed","currentSubBreed","imageElement","index","rowMapRef","has","set","width","indicesLoaded","updateIn","w","clientWidth","setIn","newHeight","clientHeight","this","addEventListener","removeEventListener","imageList","height","hasIn","push","id","src","style","padding","onLoad","className","dataLength","next","hasMore","loader","endMessage","textAlign","Component","connect","toJS","reformatting","String","prototype","CapitalizeEachWord","toLowerCase","split","map","s","charAt","toUpperCase","substring","join","setCurrentBreed","useState","value","setValue","mapIndexToBreedData","onSelect","eventKey","get","iMap","itemList","NavDropdown","Item","onClick","filter","child","children","includes","title","FormControl","autoFocus","placeholder","onChange","target","ViewControl","Navbar","bg","expand","Nav","Brand","href","Text","Toggle","aria-controls","Collapse","Link","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7753db6c.chunk.js","sourcesContent":["export const SET_URL_LIST = \"SET_URL_LIST\";\nexport const APPEND_URL_LIST = \"APPEND_URL_LIST\";\nexport const SET_BREED_DATA = \"SET_BREED_DATA\";\nexport const SET_ROW_MAP = \"SET_ROW_MAP\";\nexport const SET_CURRENT_BREED = \"SET_CURRENT_BREED\";","import { SET_URL_LIST, SET_BREED_DATA, SET_ROW_MAP, APPEND_URL_LIST, SET_CURRENT_BREED } from \"./actionTypes\"\n\nimport { OrderedSet, Map } from \"immutable\"\n\nlet initialState = { urlList: OrderedSet([]), breedData: {}, rowMap: Map(), activeBreedData: { breed: \"pug\", subBreed: null }, hasMoreImages: true }\n\nexport default function Reducer(state = initialState, action) {\n    switch (action.type) {\n        case SET_URL_LIST: {\n            return { ...state, urlList: OrderedSet(action.urlList) }\n        }\n        case APPEND_URL_LIST: {\n            let newUrlList = state.urlList.union(action.urlList)\n            let hasMoreImages = newUrlList.size > state.urlList.size\n            return { ...state, urlList: newUrlList, hasMoreImages: hasMoreImages }\n        }\n        case SET_BREED_DATA: {\n            return { ...state, breedData: action.breedData }\n        }\n        case SET_ROW_MAP: {\n            return { ...state, rowMap: action.rowMap }\n        }\n        case SET_CURRENT_BREED: {\n            return { ...state, activeBreedData: { breed: action.breed, subBreed: action.subBreed } }\n        }\n    }\n\n    return initialState;\n}","import rootReducer from \"./reducer\"\nimport { createStore } from \"redux\";\n\nexport default createStore(rootReducer);\n\n\n// import { createStore, applyMiddleware, compose } from \"redux\";\n// import thunk from \"redux-thunk\";\n\n// const store = createStore(\n//     rootReducer,\n//     compose(\n//         applyMiddleware(thunk),\n//         window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n//     )\n// );\n\n\n// export default store;","import { APPEND_URL_LIST, SET_URL_LIST, SET_BREED_DATA } from \"./actionTypes\"\nimport store from \"./store\"\n\nconst getAllImagesAPI = (breed, subBreed = null) => {\n    return `https://dog.ceo/api/breed/${breed}/${subBreed === null ? \"\" : `${subBreed}/`}images/`\n}\n\nconst getRandomImagesAPI = (number, breed, subBreed = null) => {\n    if (breed !== null)\n        return `https://dog.ceo/api/breed/${breed}/${subBreed === null ? \"\" : `${subBreed}/`}images/random/${number}`\n    else\n        return `https://dog.ceo/api/breeds/image/random/${number}`\n}\n\nconst getListOfBreedsAPI = () => {\n    return `https://dog.ceo/api/breeds/list/all`\n}\n\nexport const getMoreRandomImages = (number, breed, subBreed = null) => {\n    fetch(getRandomImagesAPI(number, breed, subBreed))\n        .then((response) => response.json())\n        .then((result) =>\n            store.dispatch({ type: APPEND_URL_LIST, urlList: result.message })\n        );\n}\n\nexport const getRandomImages = (number, breed, subBreed = null) => {\n    fetch(getRandomImagesAPI(number, breed, subBreed))\n        .then((response) => response.json())\n        .then((result) =>\n            store.dispatch({ type: SET_URL_LIST, urlList: result.message })\n        );\n}\n\nexport const getListOfBreeds = () => {\n    fetch(getListOfBreedsAPI())\n        .then((response) => response.json())\n        .then((result) =>\n            store.dispatch({ type: SET_BREED_DATA, breedData: result.message })\n        );\n}","import { render } from \"@testing-library/react\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Map, Set } from \"immutable\";\nimport store from \"./store\";\nimport { SET_ROW_MAP } from \"./actionTypes\";\nimport \"./viewer.css\"\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { getMoreRandomImages, getRandomImages } from \"./apiHelper\";\nimport { RANDOM_SAMPLE_SIZE } from \"./constants\";\n\nconst mapStateToProps = (state) => {\n  return {\n    urlList: state.urlList.toJS(), rowMap: state.rowMap, currentBreed: state.activeBreedData.breed, currentSubBreed: state.activeBreedData.subBreed,\n    hasMoreImages: state.hasMoreImages, reformatting: state.reformatting\n  };\n};\n\nconst getDesiredWidth = () => {\n  return window.innerWidth * 0.985\n}\n\nconst getMaxNumberOfImagesInRow = () => {\n  return Math.min(Math.floor(getDesiredWidth() / 200), 5)\n}\n\nexport const setRowMap = (rowMap) => {\n  store.dispatch({ type: SET_ROW_MAP, rowMap: rowMap })\n}\n\nclass Viewer extends Component {\n  reset = () => {\n    this.setState({ rowMap: Map() })\n  }\n\n  reformat = (e, incremental = false, rowIndex_ = undefined, index_ = undefined, numberOfImagesInRow_ = undefined) => {\n    e.preventDefault()\n    let oldRowMap = this.props.rowMap\n    let rowMap;\n    if (incremental) {\n      rowMap = oldRowMap\n      let indicesList = oldRowMap.getIn([rowIndex_, \"indicesLoaded\"], Set([])).add(index_)\n      rowMap = rowMap.delete(rowIndex_)\n      indicesList.forEach(i => {\n        rowMap = this.addWidthToMap(document.getElementById(`image${i}`), rowIndex_.toString(), i, numberOfImagesInRow_, rowMap)\n      })\n    } else {\n      rowMap = Map()\n      for (let i = 0; i < this.props.urlList.length; i++) {\n        let maxNumberOfImagesInRow = getMaxNumberOfImagesInRow()\n        let rowIndex = Math.floor(i / maxNumberOfImagesInRow);\n\n        let numberOfImagesInRow = maxNumberOfImagesInRow;\n        if (rowIndex === Math.floor((this.props.urlList.length - 1) / maxNumberOfImagesInRow)) {\n          numberOfImagesInRow = this.props.urlList.length - maxNumberOfImagesInRow * rowIndex\n        }\n\n        rowMap = this.addWidthToMap(document.getElementById(`image${i}`), rowIndex.toString(), i, numberOfImagesInRow, rowMap)\n      }\n    }\n\n    setRowMap(rowMap);\n  }\n\n  loadMoreImages = () => {\n    getMoreRandomImages(RANDOM_SAMPLE_SIZE, this.props.currentBreed, this.props.currentSubBreed)\n  }\n\n  componentDidMount() {\n    getRandomImages(RANDOM_SAMPLE_SIZE, this.props.currentBreed, this.props.currentSubBreed)\n    window.addEventListener(\"resize\", this.reformat)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.reformat)\n  }\n\n\n  addWidthToMap = (imageElement, rowIndex, index, numberOfImagesInRow, rowMapRef = undefined) => {\n    let rowMap = rowMapRef ? rowMapRef : this.props.rowMap\n    if (!rowMap.has(rowIndex)) {\n      rowMap = rowMap.set(rowIndex, { width: 0 })\n    }\n    let indicesLoaded = rowMap.getIn([rowIndex, \"indicesLoaded\"], Set([]))\n\n    if (!indicesLoaded.has(index)) {\n      rowMap = rowMap.updateIn([rowIndex, \"width\"], w => w + imageElement.clientWidth)\n      rowMap = rowMap.setIn([rowIndex, \"indicesLoaded\"], indicesLoaded.add(index))\n\n      if (rowMap.getIn([rowIndex, \"indicesLoaded\"]).size === numberOfImagesInRow) {\n        let newHeight = imageElement.clientHeight / window.innerWidth * 100 * (getDesiredWidth() / rowMap.getIn([rowIndex, \"width\"]))\n        rowMap = rowMap.setIn([rowIndex, \"height\"], newHeight)\n      }\n      if (rowMapRef === undefined)\n        setRowMap(rowMap);\n      else\n        return rowMap\n    }\n  }\n\n  render() {\n    let imageList = []\n\n    for (let i = 0; i < this.props.urlList.length; i++) {\n      let rowIndex = Math.floor(i / getMaxNumberOfImagesInRow());\n      let height = 30;\n\n      let maxNumberOfImagesInRow = getMaxNumberOfImagesInRow()\n      let numberOfImagesInRow = maxNumberOfImagesInRow\n      if (rowIndex === Math.floor((this.props.urlList.length - 1) / maxNumberOfImagesInRow)) {\n        numberOfImagesInRow = this.props.urlList.length - maxNumberOfImagesInRow * rowIndex\n      }\n\n      if (this.props.rowMap.hasIn([rowIndex.toString(), \"height\"])) {\n        height = this.props.rowMap.getIn([rowIndex.toString(), \"height\"])\n      }\n      imageList.push(<img key={`image${i}`} id={`image${i}`} src={this.props.urlList[i]}\n        style={{ height: `${height}vw`, padding: \"0.2%\" }}\n        onLoad={(e) => this.reformat(e, true, rowIndex.toString(), i, numberOfImagesInRow)}\n      />)\n    }\n\n    return (\n\n      <div className=\"flex-container\">\n        <InfiniteScroll\n          dataLength={this.props.urlList.length} //This is important field to render the next data\n          next={this.loadMoreImages}\n          hasMore={this.props.hasMoreImages}\n          loader={<h4>Loading...</h4>}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>Yay! You have seen it all</b>\n            </p>\n          }\n        >\n          {imageList}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps, null)(Viewer);\n","export const RANDOM_SAMPLE_SIZE = 30\n","// The forwardRef is important!!\nimport React, { useState } from \"react\";\nimport { NavDropdown, FormControl } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { SET_CURRENT_BREED } from \"./actionTypes\";\nimport { setRowMap } from \"./viewer\";\nimport { Map as iMap } from \"immutable\"\nimport { getRandomImages, getRandomImagesAPI } from \"./apiHelper\";\nimport { RANDOM_SAMPLE_SIZE } from \"./constants\";\n\nString.prototype.CapitalizeEachWord = function () {\n  let text = this.toLowerCase()\n    .split(\" \")\n    .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n    .join(\" \");\n  return text;\n};\n\nconst mapStateToProps = (state) => {\n  return { breedData: state.breedData };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setCurrentBreed: (breed, subBreed) => dispatch({ type: SET_CURRENT_BREED, breed: breed, subBreed: subBreed })\n  }\n};\n\nconst CustomDropdown = (props) => {\n  const [value, setValue] = useState(\"\")\n  let mapIndexToBreedData = new Map();\n  const onSelect = (eventKey) => {\n    let breedData = mapIndexToBreedData.get(eventKey);\n    setRowMap(iMap())\n    props.setCurrentBreed(breedData.breed, breedData.subBreed)\n    getRandomImages(RANDOM_SAMPLE_SIZE, breedData.breed, breedData.subBreed)\n  };\n\n  let itemList = [];\n  for (const breed in props.breedData) {\n    if (props.breedData[breed].length === 0) {\n      let eventKey = `${breed}`.CapitalizeEachWord()\n      mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: null });\n      itemList.push(\n        <NavDropdown.Item key={eventKey} eventKey={eventKey} onSelect={onSelect} onClick={() => { setValue(eventKey) }}>\n          {eventKey}\n        </NavDropdown.Item>\n      );\n    } else {\n      props.breedData[breed].forEach((subBreed) => {\n        let eventKey = `${breed}`.CapitalizeEachWord()\n        if (!mapIndexToBreedData.has(eventKey)) {\n          mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: null });\n          itemList.push(\n            <NavDropdown.Item key={eventKey} eventKey={eventKey} onSelect={onSelect} onClick={() => { setValue(eventKey) }}>\n              {eventKey}\n            </NavDropdown.Item>\n          );\n        }\n\n        eventKey = `${subBreed} ${breed}`.CapitalizeEachWord()\n        mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: subBreed });\n        itemList.push(\n          <NavDropdown.Item key={eventKey} eventKey={eventKey} onSelect={onSelect} onClick={() => { setValue(eventKey) }}>\n            {eventKey}\n          </NavDropdown.Item>\n        );\n\n      });\n    }\n  }\n\n  itemList = itemList.filter(\n    (child) =>\n      !value || child.props.children.toLowerCase().includes(value.toLowerCase())\n  )\n  if (itemList.length == 0) {\n    itemList.push(<NavDropdown.Item>No Results </NavDropdown.Item>)\n  }\n\n  return (\n    <NavDropdown title={\"Select Breed\"} value={value}>\n      <FormControl\n        autoFocus\n        className='mx-2 my-2 w-auto'\n        placeholder='Filter by Breed'\n        onChange={(e) => setValue(e.target.value)}\n        value={value}\n      ></FormControl>\n      {itemList}\n\n    </NavDropdown>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomDropdown);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { SET_CURRENT_BREED } from \"./actionTypes\";\nimport { RANDOM_SAMPLE_SIZE } from \"./constants\";\nimport CustomDropdown from \"./customDropdown\";\nimport {\n  Navbar,\n  Nav,\n} from \"react-bootstrap\";\nimport { getListOfBreeds, getRandomImages } from \"./apiHelper\";\nconst mapStateToProps = (state) => {\n  return { breed: state.activeBreedData.breed, subBreed: state.activeBreedData.subBreed };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setCurrentBreed: () => {\n      getRandomImages(RANDOM_SAMPLE_SIZE, null, null)\n      dispatch({ type: SET_CURRENT_BREED, breed: null, subBreed: null })\n    }\n  }\n};\n\nclass ViewControl extends Component {\n  componentDidMount() {\n    getListOfBreeds()\n  }\n  render() {\n    let title = `${this.props.subBreed ? this.props.subBreed + \" \" : \"\"}${this.props.breed ? this.props.breed : \"All Breeds\"}`.CapitalizeEachWord()\n    return (\n      <div>\n        <Navbar bg=\"light\" expand=\"lg\" >\n          <Nav className=\"mr-auto\">\n            <Navbar.Brand href=\"#home\">Dog Finder</Navbar.Brand>\n          </Nav>\n          <Nav className=\"mr-auto\">\n            <Navbar.Text size=\"lg\"> {title} </Navbar.Text>\n          </Nav>\n          <Nav>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <CustomDropdown />\n              <Nav.Link onClick={this.props.setCurrentBreed}> Random </Nav.Link>\n              <Nav.Link id=\"githubLink\" href={\"http://motiongenpro.appspot.com/\"} target={\"_blank\"} > &nbsp; </Nav.Link>\n            </Navbar.Collapse>\n          </Nav>\n        </Navbar>\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewControl);\n","import './App.css';\nimport Viewer from \"./viewer\"\nimport ViewControl from \"./viewControl\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ViewControl />\n      <Viewer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from \"./store\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}