[{"/Users/prerna/Downloads/dog-finder 2/src/index.js":"1","/Users/prerna/Downloads/dog-finder 2/src/App.js":"2","/Users/prerna/Downloads/dog-finder 2/src/store.js":"3","/Users/prerna/Downloads/dog-finder 2/src/reducer.js":"4","/Users/prerna/Downloads/dog-finder 2/src/actionTypes.js":"5","/Users/prerna/Downloads/dog-finder 2/src/constants.js":"6","/Users/prerna/Downloads/dog-finder 2/src/apiHelper.js":"7","/Users/prerna/Downloads/dog-finder 2/src/customDropdown.js":"8","/Users/prerna/Downloads/dog-finder 2/src/view.js":"9","/Users/prerna/Downloads/dog-finder 2/src/viewController.js":"10"},{"size":381,"mtime":1611393702587,"results":"11","hashOfConfig":"12"},{"size":228,"mtime":1611392801580,"results":"13","hashOfConfig":"12"},{"size":512,"mtime":1611392256344,"results":"14","hashOfConfig":"12"},{"size":1389,"mtime":1611392491616,"results":"15","hashOfConfig":"12"},{"size":238,"mtime":1611392860830,"results":"16","hashOfConfig":"12"},{"size":38,"mtime":1611392772888,"results":"17","hashOfConfig":"12"},{"size":1600,"mtime":1611392839243,"results":"18","hashOfConfig":"12"},{"size":3538,"mtime":1611392753345,"results":"19","hashOfConfig":"12"},{"size":6561,"mtime":1611392130520,"results":"20","hashOfConfig":"12"},{"size":1993,"mtime":1611391491546,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"64ntnr",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/prerna/Downloads/dog-finder 2/src/index.js",[],["48","49"],"/Users/prerna/Downloads/dog-finder 2/src/App.js",[],"/Users/prerna/Downloads/dog-finder 2/src/store.js",[],"/Users/prerna/Downloads/dog-finder 2/src/reducer.js",["50"],"import {\n  SET_URL_LIST,\n  SET_BREED_DATA,\n  SET_ROW_MAP,\n  APPEND_URL_LIST,\n  SET_CURRENT_BREED,\n} from \"./actionTypes\";\n\nimport { OrderedSet, Map } from \"immutable\";\n\nlet initialState = {\n  urlList: OrderedSet([]), // Ordered Set of image urls (Avoids Duplicate URLs)\n  breedData: {}, // object containing all breeds and subbreed\n  rowMap: Map(), // Immutable Map ( key: rowIndex, value: Object), data structure used in formatting algorithm for justified image grid\n  activeBreedData: { breed: \"pug\", subBreed: null }, // selected breed information\n  hasMoreImages: true, // if more unique images are present\n};\n\nexport default function Reducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_URL_LIST: {\n      return { ...state, urlList: OrderedSet(action.urlList) };\n    }\n    case APPEND_URL_LIST: {\n      let newUrlList = state.urlList.union(action.urlList);\n      let hasMoreImages = newUrlList.size > state.urlList.size;\n      return { ...state, urlList: newUrlList, hasMoreImages: hasMoreImages };\n    }\n    case SET_BREED_DATA: {\n      return { ...state, breedData: action.breedData };\n    }\n    case SET_ROW_MAP: {\n      return { ...state, rowMap: action.rowMap };\n    }\n    case SET_CURRENT_BREED: {\n      return {\n        ...state,\n        activeBreedData: { breed: action.breed, subBreed: action.subBreed },\n      };\n    }\n  }\n\n  return initialState;\n}\n","/Users/prerna/Downloads/dog-finder 2/src/actionTypes.js",[],"/Users/prerna/Downloads/dog-finder 2/src/constants.js",[],"/Users/prerna/Downloads/dog-finder 2/src/apiHelper.js",["51"],"import { APPEND_URL_LIST, SET_URL_LIST, SET_BREED_DATA } from \"./actionTypes\";\nimport store from \"./store\";\n\nconst getAllImagesAPI = (breed, subBreed = null) => {\n  return `https://dog.ceo/api/breed/${breed}/${\n    subBreed === null ? \"\" : `${subBreed}/`\n  }images/`;\n};\n\nconst getRandomImagesAPI = (number, breed, subBreed = null) => {\n  if (breed !== null)\n    return `https://dog.ceo/api/breed/${breed}/${\n      subBreed === null ? \"\" : `${subBreed}/`\n    }images/random/${number}`;\n  else return `https://dog.ceo/api/breeds/image/random/${number}`;\n};\n\nconst getListOfBreedsAPI = () => {\n  return `https://dog.ceo/api/breeds/list/all`;\n};\n\nexport const getMoreRandomImages = (number, breed, subBreed = null) => {\n  fetch(getRandomImagesAPI(number, breed, subBreed))\n    .then((response) => response.json())\n    .then((result) =>\n      store.dispatch({ type: APPEND_URL_LIST, urlList: result.message })\n    )\n    .catch((error) => {\n      console.log(\"Error:\", error);\n    });\n};\n\nexport const getRandomImages = (number, breed, subBreed = null) => {\n  fetch(getRandomImagesAPI(number, breed, subBreed))\n    .then((response) => response.json())\n    .then((result) =>\n      store.dispatch({ type: SET_URL_LIST, urlList: result.message })\n    )\n    .catch((error) => {\n      console.log(\"Error:\", error);\n    });\n};\n\nexport const getListOfBreeds = () => {\n  fetch(getListOfBreedsAPI())\n    .then((response) => response.json())\n    .then((result) =>\n      store.dispatch({ type: SET_BREED_DATA, breedData: result.message })\n    )\n    .catch((error) => {\n      console.log(\"Error:\", error);\n    });\n};\n","/Users/prerna/Downloads/dog-finder 2/src/customDropdown.js",["52","53","54"],"import React, { useState } from \"react\";\nimport { NavDropdown, FormControl } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { SET_CURRENT_BREED } from \"./actionTypes\";\nimport { setRowMap } from \"./view\";\nimport { Map as iMap } from \"immutable\";\nimport { getRandomImages, getRandomImagesAPI } from \"./apiHelper\";\nimport { RANDOM_SAMPLE_SIZE } from \"./constants\";\nimport \"./customDropdown.css\";\n\nString.prototype.CapitalizeEachWord = function () {\n  let text = this.toLowerCase()\n    .split(\" \")\n    .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n    .join(\" \");\n  return text;\n};\n\nconst mapStateToProps = (state) => {\n  return { breedData: state.breedData };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setCurrentBreed: (breed, subBreed) =>\n      dispatch({ type: SET_CURRENT_BREED, breed: breed, subBreed: subBreed }),\n  };\n};\n\nconst CustomDropdown = (props) => {\n  // Custom DropDown Selection Menu that facilitates filtering based on query\n\n  const [value, setValue] = useState(\"\");\n  let mapIndexToBreedData = new Map();\n  const onSelect = (eventKey) => {\n    setValue(\"\");\n    let breedData = mapIndexToBreedData.get(eventKey);\n    setRowMap(iMap());\n    props.setCurrentBreed(breedData.breed, breedData.subBreed);\n    getRandomImages(RANDOM_SAMPLE_SIZE, breedData.breed, breedData.subBreed);\n  };\n\n  let itemList = [];\n  for (const breed in props.breedData) {\n    if (props.breedData[breed].length === 0) {\n      let eventKey = `${breed}`.CapitalizeEachWord();\n      mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: null });\n      itemList.push(\n        <NavDropdown.Item\n          key={eventKey}\n          eventKey={eventKey}\n          onSelect={onSelect}\n          onClick={() => {\n            setValue(eventKey);\n          }}\n        >\n          {eventKey}\n        </NavDropdown.Item>\n      );\n    } else {\n      props.breedData[breed].forEach((subBreed) => {\n        let eventKey = `${breed}`.CapitalizeEachWord();\n        if (!mapIndexToBreedData.has(eventKey)) {\n          mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: null });\n          itemList.push(\n            <NavDropdown.Item\n              key={eventKey}\n              eventKey={eventKey}\n              onSelect={onSelect}\n              onClick={() => {\n                setValue(eventKey);\n              }}\n            >\n              {eventKey}\n            </NavDropdown.Item>\n          );\n        }\n\n        eventKey = `${subBreed} ${breed}`.CapitalizeEachWord();\n        mapIndexToBreedData.set(eventKey, { breed: breed, subBreed: subBreed });\n        itemList.push(\n          <NavDropdown.Item\n            key={eventKey}\n            eventKey={eventKey}\n            onSelect={onSelect}\n            onClick={() => {\n              setValue(eventKey);\n            }}\n          >\n            {eventKey}\n          </NavDropdown.Item>\n        );\n      });\n    }\n  }\n\n  itemList = itemList.filter(\n    (child) =>\n      !value || child.props.children.toLowerCase().includes(value.toLowerCase())\n  );\n  if (itemList.length === 0) {\n    itemList.push(<NavDropdown.Item>No Results </NavDropdown.Item>);\n  }\n\n  return (\n    <NavDropdown title={\"Select Breed\"} value={value}>\n      <FormControl\n        autoFocus\n        className='mx-2 my-2 w-auto'\n        placeholder='Filter by Breed'\n        onChange={(e) => setValue(e.target.value)}\n        value={value}\n      ></FormControl>\n      {itemList}\n    </NavDropdown>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomDropdown);\n",["55","56"],"/Users/prerna/Downloads/dog-finder 2/src/view.js",["57","58"],"import { Modal } from \"react-bootstrap\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Map, Set } from \"immutable\";\nimport store from \"./store\";\nimport { SET_ROW_MAP } from \"./actionTypes\";\nimport \"./view.css\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { getMoreRandomImages, getRandomImages } from \"./apiHelper\";\nimport { RANDOM_SAMPLE_SIZE } from \"./constants\";\n\nconst mapStateToProps = (state) => {\n  return {\n    urlList: state.urlList.toJS(),\n    rowMap: state.rowMap,\n    currentBreed: state.activeBreedData.breed,\n    currentSubBreed: state.activeBreedData.subBreed,\n    hasMoreImages: state.hasMoreImages,\n    reformatting: state.reformatting,\n  };\n};\n\nconst getDesiredWidth = () => {\n  return window.innerWidth * 0.985;\n};\n\nconst getMaxNumberOfImagesInRow = () => {\n  return Math.min(Math.floor(getDesiredWidth() / 200), 5);\n};\n\nexport const setRowMap = (rowMap) => {\n  store.dispatch({ type: SET_ROW_MAP, rowMap: rowMap });\n};\n\nclass View extends Component {\n  /* Gallery Viewer Component\n     Arranges Images into a justified grid\n  */\n  constructor(props) {\n    super(props);\n    this.state = {\n      showImageModal: false,\n      selectedImageId: null,\n    };\n  }\n\n  reformat = (\n    e,\n    incremental = false,\n    rowIndex_ = undefined,\n    index_ = undefined,\n    numberOfImagesInRow_ = undefined\n  ) => {\n    /* Code for Justifying the grid\n       Cumulative width of each image row should be same\n       defined by getDesiredWidth()\n    */\n    e.preventDefault();\n    let oldRowMap = this.props.rowMap;\n    let rowMap;\n    if (incremental) {\n      rowMap = oldRowMap;\n      let indicesList = oldRowMap\n        .getIn([rowIndex_, \"indicesLoaded\"], Set([]))\n        .add(index_);\n      rowMap = rowMap.delete(rowIndex_);\n      indicesList.forEach((i) => {\n        rowMap = this.addWidthToMap(\n          document.getElementById(`image${i}`),\n          rowIndex_.toString(),\n          i,\n          numberOfImagesInRow_,\n          rowMap\n        );\n      });\n    } else {\n      rowMap = Map();\n      for (let i = 0; i < this.props.urlList.length; i++) {\n        let maxNumberOfImagesInRow = getMaxNumberOfImagesInRow();\n        let rowIndex = Math.floor(i / maxNumberOfImagesInRow);\n\n        let numberOfImagesInRow = maxNumberOfImagesInRow;\n        if (\n          rowIndex ===\n          Math.floor((this.props.urlList.length - 1) / maxNumberOfImagesInRow)\n        ) {\n          numberOfImagesInRow =\n            this.props.urlList.length - maxNumberOfImagesInRow * rowIndex;\n        }\n\n        rowMap = this.addWidthToMap(\n          document.getElementById(`image${i}`),\n          rowIndex.toString(),\n          i,\n          numberOfImagesInRow,\n          rowMap\n        );\n      }\n    }\n\n    setRowMap(rowMap);\n  };\n\n  loadMoreImages = () => {\n    getMoreRandomImages(\n      RANDOM_SAMPLE_SIZE,\n      this.props.currentBreed,\n      this.props.currentSubBreed\n    );\n  };\n\n  componentDidMount() {\n    getRandomImages(\n      RANDOM_SAMPLE_SIZE,\n      this.props.currentBreed,\n      this.props.currentSubBreed\n    );\n    window.addEventListener(\"resize\", this.reformat);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.reformat);\n  }\n\n  addWidthToMap = (\n    imageElement,\n    rowIndex,\n    index,\n    numberOfImagesInRow,\n    rowMapRef = undefined\n  ) => {\n    let rowMap = rowMapRef ? rowMapRef : this.props.rowMap;\n    if (!rowMap.has(rowIndex)) {\n      rowMap = rowMap.set(rowIndex, { width: 0 });\n    }\n    let indicesLoaded = rowMap.getIn([rowIndex, \"indicesLoaded\"], Set([]));\n\n    if (!indicesLoaded.has(index)) {\n      rowMap = rowMap.updateIn(\n        [rowIndex, \"width\"],\n        (w) => w + imageElement.clientWidth\n      );\n      rowMap = rowMap.setIn(\n        [rowIndex, \"indicesLoaded\"],\n        indicesLoaded.add(index)\n      );\n\n      if (\n        rowMap.getIn([rowIndex, \"indicesLoaded\"]).size === numberOfImagesInRow\n      ) {\n        let newHeight =\n          (imageElement.clientHeight / window.innerWidth) *\n          100 *\n          (getDesiredWidth() / rowMap.getIn([rowIndex, \"width\"]));\n        rowMap = rowMap.setIn([rowIndex, \"height\"], newHeight);\n      }\n      if (rowMapRef === undefined) setRowMap(rowMap);\n      else return rowMap;\n    }\n  };\n\n  render() {\n    const handleClose = () => this.setState({ showImageModal: false });\n    const handleShow = () => this.setState({ showImageModal: true });\n    let imageList = [];\n\n    for (let i = 0; i < this.props.urlList.length; i++) {\n      let rowIndex = Math.floor(i / getMaxNumberOfImagesInRow());\n      let height = 30;\n\n      let maxNumberOfImagesInRow = getMaxNumberOfImagesInRow();\n      let numberOfImagesInRow = maxNumberOfImagesInRow;\n      if (\n        rowIndex ===\n        Math.floor((this.props.urlList.length - 1) / maxNumberOfImagesInRow)\n      ) {\n        numberOfImagesInRow =\n          this.props.urlList.length - maxNumberOfImagesInRow * rowIndex;\n      }\n\n      if (this.props.rowMap.hasIn([rowIndex.toString(), \"height\"])) {\n        height = this.props.rowMap.getIn([rowIndex.toString(), \"height\"]);\n      }\n      imageList.push(\n        <img\n          key={`image${i}`}\n          id={`image${i}`}\n          src={this.props.urlList[i]}\n          onClick={() => {\n            this.setState({ selectedImageId: i });\n            handleShow();\n          }}\n          style={{ height: `${height}vw`, padding: \"0.2%\" }}\n          onLoad={(e) =>\n            this.reformat(e, true, rowIndex.toString(), i, numberOfImagesInRow)\n          }\n        />\n      );\n    }\n\n    return (\n      <div>\n        <div className='flex-container'>\n          <InfiniteScroll\n            dataLength={this.props.urlList.length} //This is important field to render the next data\n            next={this.loadMoreImages}\n            hasMore={this.props.hasMoreImages}\n            loader={<h4>Loading...</h4>}\n            endMessage={\n              <p style={{ textAlign: \"center\" }}>\n                <b>You have seen them all!</b>\n              </p>\n            }\n          >\n            {imageList}\n          </InfiniteScroll>\n        </div>\n        <Modal show={this.state.showImageModal} onHide={handleClose}>\n          <Modal.Header closeButton></Modal.Header>\n          <Modal.Body>\n            <img\n              src={this.props.urlList[this.state.selectedImageId]}\n              style={{ width: \"100%\" }}\n            />\n          </Modal.Body>\n          <Modal.Footer></Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\nexport default connect(mapStateToProps, null)(View);\n","/Users/prerna/Downloads/dog-finder 2/src/viewController.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":20,"column":3,"nodeType":"65","messageId":"66","endLine":41,"endColumn":4},{"ruleId":"67","severity":1,"message":"68","line":4,"column":7,"nodeType":"69","messageId":"70","endLine":4,"endColumn":22},{"ruleId":"67","severity":1,"message":"71","line":7,"column":27,"nodeType":"69","messageId":"70","endLine":7,"endColumn":45},{"ruleId":"72","severity":1,"message":"73","line":11,"column":1,"nodeType":"74","messageId":"75","endLine":17,"endColumn":2},{"ruleId":"76","severity":1,"message":"77","line":61,"column":38,"nodeType":"78","messageId":"79","endLine":93,"endColumn":8},{"ruleId":"59","replacedBy":"80"},{"ruleId":"61","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":185,"column":9,"nodeType":"84","endLine":197,"endColumn":11},{"ruleId":"82","severity":1,"message":"83","line":221,"column":13,"nodeType":"84","endLine":224,"endColumn":15},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'getAllImagesAPI' is assigned a value but never used.","Identifier","unusedVar","'getRandomImagesAPI' is defined but never used.","no-extend-native","String prototype is read only, properties should not be added.","AssignmentExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'itemList', 'itemList'.","ArrowFunctionExpression","unsafeRefs",["85"],["86"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]